link:http://cr.yp.to/ecdh.html[curve25519] is an elliptic curve, developed by link:http://cr.yp.to/djb.html[Dan Bernstein], for fast link:http://en.wikipedia.org/wiki/Diffie-Hellman[Diffie-Hellman] key agreement. DJB's link:http://cr.yp.to/ecdh.html[original implementation] was written in a language of his own devising called link:http://cr.yp.to/qhasm.html[qhasm]. The original qhasm source isn't available, only the x86 32-bit assembly output.

Since many x86 systems are now 64-bit, and portability is important, this project provides alternative implementations for other platforms. 

.Implementation Survey (On an E5200 @ 2.5ghz)
[options="header"]
|=======================
|*Implementation*|*Platform*|*Author*|*32-bit speed*|*64-bit speed*|*Constant time*
|curve25519|x86 32-bit|djb|244&mu;s|[silver]#N/A#|[green]#yes#
|curve25591-donna (old)|32-bit C|agl|2078&mu;s|551&mu;s|[red]#no#
|curve25591-donna|32-bit C|multiple|*662&mu;s*|*281&mu;s*|[green]#yes#
|curve25519-donna-c64 (old)|64-bit C|agl|[silver]#N/A#|215&mu;s|[green]#yes#
|curve25519-donna-c64|64-bit C|multiple|[silver]#N/A#|*113&mu;s*|[green]#yes#
|=======================

Usage
-----

The usage is exactly the same as djb's code (as described at http://cr.yp.to/ecdh.html) except that the function is called curve25519_donna.

To generate a private key, generate 32 random bytes and: 

[source,c]
--------------------
mysecret[0] &= 248;
mysecret[31] &= 127;
mysecret[31] |= 64;
--------------------

To generate the public key:

[source,c]
--------------------
static const uint8_t basepoint[32] = {9};
curve25519_donna(mypublic, mysecret, basepoint);
--------------------

And hash the shared_key with a cryptographic hash function before using.

For more information, see link:http://cr.yp.to/ecdh.html[djb's page]

Papers
------
link:http://cr.yp.to/ecdh/curve25519-20060209.pdf[djb's curve25519 paper]